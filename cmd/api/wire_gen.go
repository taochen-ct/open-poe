// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"go.uber.org/zap"
	"gopkg.in/natefinch/lumberjack.v2"
	"open-poe/config"
	"open-poe/internal/cases/user"
	"open-poe/internal/command"
	"open-poe/internal/command/handler"
	"open-poe/internal/compo"
	"open-poe/internal/middleware"
	"open-poe/routes"
)

// Injectors from wire.go:

// wireApp dependency inject
func wireApp(configuration *config.Configuration, lumberjackLogger *lumberjack.Logger, zapLogger *zap.Logger) (*App, func(), error) {
	recovery := middleware.NewRecoveryMiddleware(lumberjackLogger)
	cors := middleware.NewCorsMiddleware()
	limiterManager := compo.NewLimiterManager()
	limiter := middleware.NewLimiterMiddleware(limiterManager)
	db := compo.NewDB(configuration, zapLogger)
	client := compo.NewRedis(configuration, zapLogger)
	sonyflake := compo.NewSonyFlake()
	data, cleanup, err := compo.NewData(zapLogger, db, client, sonyflake)
	if err != nil {
		return nil, nil, err
	}
	repo := user.NewRepository(data, zapLogger)
	service := user.NewService(repo, client, sonyflake)
	handler := user.NewHandler(zapLogger, configuration, service)
	engine := routes.CreateRouter(recovery, cors, limiter, handler)
	server := newHttpServer(configuration, engine)
	app := newApp(configuration, zapLogger, server)
	return app, func() {
		cleanup()
	}, nil
}

// wireCommand init application.
func wireCommand(configuration *config.Configuration, lumberjackLogger *lumberjack.Logger, zapLogger *zap.Logger) (*command.Command, func(), error) {
	exampleHandler := handler.NewExampleHandler(zapLogger)
	commandCommand := command.NewCommand(exampleHandler)
	return commandCommand, func() {
	}, nil
}
